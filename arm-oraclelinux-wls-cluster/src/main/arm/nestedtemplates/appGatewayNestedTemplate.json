{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			}
		},
		"_artifactsLocationSasToken": {
			"type": "securestring",
			"metadata": {
				"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
			}
		},
		"guidValue": {
			"type": "string",
			"defaultValue": "[newGuid()]"
		},
                "hasAppGatewaySSLCertificate": {
                    "type": "bool",
                    "defaultValue": "[and(not(empty(parameters('appGatewaySSLCertificateData'))),not(empty(parameters('appGatewaySSLCertificatePassword'))))]"
                },
		"adminUsername": {
			"type": "string",
			"metadata": {
				"description": "User name for the Virtual Machine."
			}
		},
		"authenticationType": {
			"type": "string",
			"defaultValue": "password",
			"allowedValues": [
				"sshPublicKey",
				"password"
			],
			"metadata": {
				"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
			}
		},
		"adminPasswordOrKey": {
			"type": "securestring",
			"metadata": {
				"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
			}
		},
		"acceptOTNLicenseAgreement": {
			"type": "string",
			"metadata": {
				"description": "Do you agree to provide OTN credentials to accept OTN License Agreement? Enter Y or y to agree, else N or n"
			}
		},
		"otnAccountUsername": {
			"type": "string",
			"metadata": {
				"description": "Username for your Oracle Technology Network account"
			}
		},
		"otnAccountPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Password for your Oracle Technology Network account"
			}
		},
		"portsToExpose": {
			"type": "string",
			"defaultValue": "80,443,7001-9000",
			"metadata": {
				"description": "Ports and port ranges to expose"
			}
		},
		"wlsDomainName": {
			"type": "string",
			"metadata": {
				"description": "Provide Weblogic domain name"
			}
		},
		"wlsUserName": {
			"type": "string",
			"metadata": {
				"description": "Username for your Weblogic domain name"
			}
		},
		"wlsPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Password for your Weblogic domain name"
			}
		},
		"managedServerPrefix": {
			"type": "string",
			"defaultValue": "managedServer",
			"metadata": {
				"description": "Provide managed server prefix names"
			}
		},
		"dnsLabelPrefix": {
			"type": "string",
			"metadata": {
				"description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
			}
		},
		"dnsNameforApplicationGateway": {
			"type": "string",
			"defaultValue": "wlsclusterappgw",
			"metadata": {
				"description": "DNS for ApplicationGateway"
			}
		},
		"GatewayPublicIPAddressName": {
			"type": "string",
			"defaultValue": "gatewayPublicIP",
			"metadata": {
				"description": "Public IP Name for the Application Gateway"
			}
		},
		"linuxOSVersion": {
			"type": "string",
			"defaultValue": "7.4",
			"allowedValues": [
				"7.4",
				"7.3"
			],
			"metadata": {
				"description": "The Oracle Linux version for the VM. This will pick a fully patched image of this given Oracle Linux version."
			}
		},
		"numberOfInstances": {
			"type": "int",
			"defaultValue": 2,
			"minValue": 2,
			"maxValue": 5,
			"metadata": {
				"description": "Number of VMs to deploy, limit 5 since this sample is using a single storage account"
			}
		},
		"adminVMName": {
			"type": "string",
			"defaultValue": "adminVM",
			"metadata": {
				"description": "Admin Server hosting VM name."
			}
		},
		"location": {
			"type": "string",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"vmSizeSelect": {
			"type": "string",
			"defaultValue": "Standard_A3",
			"allowedValues": [
				"Standard_A1",
				"Standard_A2",
				"Standard_A3",
				"Standard_A4"
			],
			"metadata": {
				"description": "Select appropriate VM Size as per requirement (Standard_A1, Standard_A2, Standard_A3, Standard_A4)"
			}
		},		
		"appGatewaySSLCertificateData": {
		    "type": "string",
                    "defaultValue": ""
		},
		"appGatewaySSLCertificatePassword" : {
		    "type": "string",
                    "defaultValue": ""
		}
	},
	"variables": {
		"imagePublisher": "Oracle",
		"imageOffer": "Oracle-Linux",
		"managedVMPrefix": "[concat(parameters('managedServerPrefix'),'VM')]",		
		"nicName": "_NIC",
		"storageAccountName": "[concat(take(replace(parameters('guidValue'),'-',''),6),'olvm')]",
		"addressPrefix": "10.0.0.0/16",
		"subnetName": "Subnet",
		"subnetPrefix": "10.0.0.0/24",
		"storageAccountType": "Standard_LRS",
		"publicIPAddressName": "_PublicIP",
		"outputAdminHostName": "[concat(parameters('adminVMName'),variables('publicIPAddressName'))]",
		"publicIPAddressType": "Dynamic",
		"vmSize": "[parameters('vmSizeSelect')]",
		"virtualNetworkName": "[concat(parameters('wlsDomainName'),'_VNET')]",
		"oradownScript": "oradown.sh",
		"ScriptFileName": "setupClusterDomain.sh",
		"availabilitySetName": "WLSCluster-AvailabilitySet",
		"appGatewayName": "myAppGateway",
		"appGatewaySubnetName": "appGatewaySubnet",
		"appGatewaySubnetPrefix": "10.0.1.0/24",
		"probeName":"HTTPhealthProbe",
		"frontEndIPConfigName":"appGwPublicFrontendIp",
		"httpListenerName":"HTTPListener",
		"httpsListenerName":"HTTPSListener",
		"httpPortName":"http_port",
		"httpsPortName":"https_port",
		"appGatewayCertificateName":"appGwSslCertificate",
		"httpSettingName":"myHTTPSetting",
		"backendAddressPoolName":"myGatewayBackendPool",
		"appGatewaySubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('appGatewaySubnetName'))]",
		"appGatewayPublicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('GatewayPublicIPAddressName'))]",
		"appGatewayFrontEndHTTPPort": 80,
		"appGatewayFrontEndHTTPSPort": 443,
		"backendPort": 8001,
		"backendProbeRef": "[resourceId('Microsoft.Network/applicationGateways/probes', variables('appGatewayName'),variables('probeName'))]",
		"frontendIPConfigurationRef": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('appGatewayName'),variables('frontEndIPConfigName'))]",
		"frontendHTTPPortRef": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('appGatewayName'),variables('httpPortName'))]",
		"frontendHTTPSPortRef": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('appGatewayName'),variables('httpsPortName'))]",
		"SslCertificateRef": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates', variables('appGatewayName'),variables('appGatewayCertificateName'))]",
		"backendAddressPoolRef": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGatewayName'),variables('backendAddressPoolName'))]",
		"backendHttpSettingsRef": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGatewayName'),variables('httpSettingName'))]",
		"httpListenerRef" : "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('appGatewayName'),variables('httpListenerName'))]",
		"httpsListenerRef": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('appGatewayName'),variables('httpsListenerName'))]",
		"linuxConfiguration": {
			"disablePasswordAuthentication": true,
			"ssh": {
				"publicKeys": [
				{
					"path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
					"keyData": "[parameters('adminPasswordOrKey')]"
				}
			  ]
			}
		},
		"subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
		"networkSecurityGroupName": "[concat(parameters('dnsLabelPrefix'), '-nsg')]",
		"networkSecurityGroupRef": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]",
	    "requiredPortrange": ",65200-65535,5556",
            "appGatewayNonSslProperties": {
		"sku": {
		    "name": "WAF_v2",
		    "tier": "WAF_v2"
		},
		"gatewayIPConfigurations": [{
		    "name": "appGatewayIpConfig",
		    "properties": {
			"subnet": {
			    "id": "[variables('appGatewaySubnetRef')]"
			}
		    },
		    "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
		}],
		"frontendIPConfigurations": [{
		    "name": "appGwPublicFrontendIp",
		    "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations",
		    "properties": {
			"publicIPAddress": {
			    "id": "[variables('appGatewayPublicIPRef')]"
			}
		    }
		}],
		"frontendPorts": [
                    {
		        "name": "http_port",
		        "properties": {
			    "port": "[int(variables('appGatewayFrontEndHTTPPort'))]"
		        },
		        "type": "Microsoft.Network/applicationGateways/frontendPorts"
		    },
		    {
			"name": "https_port",
			"properties": {
			    "port": "[int(variables('appGatewayFrontEndHTTPSPort'))]"
			},
			"type": "Microsoft.Network/applicationGateways/frontendPorts"
		    }
		],
		"backendAddressPools": [{
		    "name": "myGatewayBackendPool",
		    "properties": {
			"copy": [{
			    "name": "BackendAddresses",
			    "count": "[sub(int(parameters('numberOfInstances')),1)]",
			    "input": {
				"fqdn": "[concat(variables('managedVMPrefix'), copyIndex('BackendAddresses',1))]"
			    }
			}]
		    },
		    "type": "Microsoft.Network/applicationGateways/backendAddressPools"
		}],
		"backendHttpSettingsCollection": [{
		    "name": "myHTTPSetting",
		    "properties": {
			"provisioningState": "Succeeded",
			"port": "[int(variables('backendPort'))]",
			"protocol": "Http",
			"cookieBasedAffinity": "Enabled",
			"pickHostNameFromBackendAddress": true,
			"affinityCookieName": "ApplicationGatewayAffinity",
			"requestTimeout": 20,
			"probe": {
			    "id": "[variables('backendProbeRef')]"
			}
		    },
		    "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
		}],
		"requestRoutingRules": [
                    {
		        "name": "HTTPRoutingRule",
		        "properties": {
			    "ruleType": "Basic",
			    "httpListener": {
			        "id": "[variables('httpListenerRef')]"
			    },
			    "backendAddressPool": {
			        "id": "[variables('backendAddressPoolRef')]"
			    },
			    "backendHttpSettings": {
			        "id": "[variables('backendHttpSettingsRef')]"
			    }
		        },
		        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
		    },
		    {
			"name": "HTTPSRoutingRule",
			"properties": {
			    "ruleType": "Basic",
			    "httpListener": {
				"id": "[variables('httpsListenerRef')]"
			    },
			    "backendAddressPool": {
				"id": "[variables('backendAddressPoolRef')]"
			    },
			    "backendHttpSettings": {
				"id": "[variables('backendHttpSettingsRef')]"
			    }
			},
			"type": "Microsoft.Network/applicationGateways/requestRoutingRules"
		    }
		],
		"probes": [
                    {
		        "name": "HTTPhealthProbe",
		        "properties": {
			    "protocol": "Http",
			    "path": "/weblogic/ready",
			    "interval": 30,
			    "timeout": 30,
			    "unhealthyThreshold": 3,
			    "pickHostNameFromBackendHttpSettings": true,
			    "minServers": 0,
			    "match": {
			        "statusCodes": [
				    "200-399"
			        ]
			    }
		        },
		        "type": "Microsoft.Network/applicationGateways/probes"
		    }],
		"enableHttp2": false,
		"autoscaleConfiguration": {
		    "minCapacity": 2,
		    "maxCapacity": 3
		}
	    },
            "appGatewayHttpListenersWithSSLProperty": {
		"httpListeners": [
                    {
		        "name": "HTTPListener",
		        "properties": {
			    "frontendIPConfiguration": {
			        "id": "[variables('frontendIPConfigurationRef')]"
			    },
			    "frontendPort": {
			        "id": "[variables('frontendHTTPPortRef')]"
			    },
			    "protocol": "Http",
			    "requireServerNameIndication": false
		        },
		        "type": "Microsoft.Network/applicationGateways/httpListeners"
		    },
                    {
                        "name": "HTTPSListener",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('frontendIPConfigurationRef')]"
                            },
                            "frontendPort": {
                                "id": "[variables('frontendHTTPSPortRef')]"
                            },
                            "protocol": "Https",
                            "requireServerNameIndication": false,
                            "sslCertificate": {
                                "id": "[variables('SslCertificateRef')]"
                            }
                        },
                        "type": "Microsoft.Network/applicationGateways/httpListeners"
                    }
                ],

            },
            "appGatewayHttpListenersWithoutSSLProperty": {
		"httpListeners": [
                    {
		        "name": "HTTPListener",
		        "properties": {
			    "frontendIPConfiguration": {
			        "id": "[variables('frontendIPConfigurationRef')]"
			    },
			    "frontendPort": {
			        "id": "[variables('frontendHTTPPortRef')]"
			    },
			    "protocol": "Http",
			    "requireServerNameIndication": false
		        },
		        "type": "Microsoft.Network/applicationGateways/httpListeners"
		    },
                    {
                        "name": "HTTPSListener",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('frontendIPConfigurationRef')]"
                            },
                            "frontendPort": {
                                "id": "[variables('frontendHTTPSPortRef')]"
                            },
                            "protocol": "Https",
                            "requireServerNameIndication": false,
                        },
                        "type": "Microsoft.Network/applicationGateways/httpListeners"
                    }
                ],

            },
            "appGatewaySslCertificateProperty": {
                "sslCertificates": [{
		    "name": "appGwSslCertificate",
		    "properties": {
		        "data": "[parameters('appGatewaySSLCertificateData')]",
		        "password": "[parameters('appGatewaySSLCertificatePassword')]"
		    }
	        }]
            }
            "appGatewayProperties": "[union(variables('appGatewayNonSslProperties'), if(parameters('hasAppGatewaySSLCertificate'), variables('appGatewayHttpListenersWithSSLProperty'), variables('appGatewayHttpListenersWithoutSSLProperty')), if(parameters('hasAppGatewaySSLCertificate'), variables('appGatewaySslCertificateProperty'), json('null')))]"
	},
    "resources": [
	  {
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2019-06-01",
			"name": "[variables('networkSecurityGroupName')]",
			"location": "[parameters('location')]",
			"properties": {
				"securityRules": [
					{
						"name": "WebLogicPorts",
						"properties": {
							"protocol": "TCP",
							"sourcePortRange": "*",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 320,
							"direction": "Inbound",
							"destinationPortRanges": "[split(concat(parameters('portsToExpose'),variables('requiredPortrange')), ',')]"
						}
					}
				]
			}
	   },	
	   {
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2019-06-01",
			"name": "[variables('storageAccountName')]",
			"location": "[parameters('location')]",
			"sku": {
				"name": "[variables('storageAccountType')]"
			},
			"kind": "Storage",
			"properties": {
			}
		},
		{
			"apiVersion": "2018-04-01",
			"type": "Microsoft.Compute/availabilitySets",
			"location": "[parameters('location')]",
			"name": "[variables('availabilitySetName')]",
			"properties": {
				"platformFaultDomainCount": 2,
				"platformUpdateDomainCount": 2
			},
			"sku": {
				"name": "Aligned"
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2018-11-01",
			"name": "[parameters('GatewayPublicIPAddressName')]",
			"sku": {
				"name": "Standard"
			},
			"location": "[parameters('location')]",
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[concat(parameters('dnsNameforApplicationGateway'),'-',toLower(resourceGroup().name),'-',toLower(parameters('wlsDomainName')))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2018-11-01",
			"name": "[if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('publicIPAddressName')),concat(variables('managedVMPrefix'), copyIndex(),variables('publicIPAddressName')))]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "publicIPLoop",
				"count": "[parameters('numberOfInstances')]"
			},
			"properties": {
				"publicIPAllocationMethod": "[variables('publicIPAddressType')]",
				"dnsSettings": {
					"domainNameLabel": "[concat(toLower(parameters('dnsLabelPrefix')),copyindex(),'-',take(replace(parameters('guidValue'),'-',''),10),'-',toLower(parameters('wlsDomainName')))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"apiVersion": "2018-11-01",
			"name": "[variables('virtualNetworkName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('networkSecurityGroupRef')]"
			],
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [
				   {
						"name": "[variables('subnetName')]",
						"properties": {
							"addressPrefix": "[variables('subnetPrefix')]",
							"networkSecurityGroup": {
								"id": "[variables('networkSecurityGroupRef')]"
							}
						}
					},
					{
						"name": "[variables('appGatewaySubnetName')]",
						"properties": {
							"addressPrefix": "[variables('appGatewaySubnetPrefix')]",
							"networkSecurityGroup": {
								"id": "[variables('networkSecurityGroupRef')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2018-11-01",
			"name": "[if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('nicName')),concat(variables('managedVMPrefix'), copyIndex(),variables('nicName')))]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "nicLoop",
				"count": "[parameters('numberOfInstances')]"
			},
			"dependsOn": [
				"[variables('virtualNetworkName')]",
				"publicIPLoop",
				"[parameters('GatewayPublicIPAddressName')]"				
			],
			"properties": {
				"ipConfigurations": [
				   {
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('publicIPAddressName')),concat(variables('managedVMPrefix'), copyIndex(),variables('publicIPAddressName'))))]"
							},
							"subnet": {
								"id": "[variables('subnetRef')]"
							}
					}
				}
			  ]
			}
		},
		{
			"type": "Microsoft.Network/applicationGateways",
			"dependsOn": [
				"[variables('virtualNetworkName')]",
				"[concat('Microsoft.Compute/virtualMachines/',parameters('adminVMName'))]",
				"virtualMachineLoop"
			],
			"apiVersion": "2019-06-01",
			"name": "[variables('appGatewayName')]",
			"location": "[parameters('location')]",
			"properties": "[variables('appGatewayProperties')]"
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2018-10-01",
			"name": "[if(equals(copyIndex(),0),parameters('adminVMName'),concat(variables('managedVMPrefix'), copyIndex()))]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "virtualMachineLoop",
				"count": "[parameters('numberOfInstances')]"
			},
			"dependsOn": [
				"nicLoop",
				"[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
				},
				"hardwareProfile": {
					"vmSize": "[variables('vmSize')]"
				},
				"osProfile": {
					"computerName": "[if(equals(copyIndex(),0),parameters('adminVMName'),concat(variables('managedVMPrefix'), copyIndex()))]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPasswordOrKey')]",
					"linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "[variables('imagePublisher')]",
						"offer": "[variables('imageOffer')]",
						"sku": "[parameters('linuxOSVersion')]",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage"
					},
					"dataDisks": [
					    {
						    "diskSizeGB": 900,
						    "lun": 0,
						    "createOption": "Empty"
					    }
					 ]
				},
				"networkProfile": {
					"networkInterfaces": [
					    {
						    "id": "[resourceId('Microsoft.Network/networkInterfaces',if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('nicName')),concat(variables('managedVMPrefix'), copyIndex(),variables('nicName'))))]"
					    }
					 ]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2019-06-01').primaryEndpoints.blob]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[if(equals(copyIndex(),0),concat(parameters('adminVMName'),'/newuserscript'),concat(variables('managedVMPrefix'), copyIndex(),'/newuserscript'))]",
			"apiVersion": "2019-07-01",
			"location": "[parameters('location')]",
			"copy": {
				"name": "virtualMachineExtensionLoop",
				"count": "[parameters('numberOfInstances')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/',parameters('adminVMName'))]",
				"virtualMachineLoop"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[uri(parameters('_artifactsLocation'), concat('../scripts/', variables('ScriptFileName'), parameters('_artifactsLocationSasToken')))]",
						"[uri(parameters('_artifactsLocation'), concat('../scripts/', variables('oradownScript'), parameters('_artifactsLocationSasToken')))]"
					],
					"commandToExecute": "[concat('sh',' ',variables('ScriptFileName'),' ',parameters('acceptOTNLicenseAgreement'),' ',parameters('otnAccountUsername'),' ',parameters('otnAccountPassword'),' ',parameters('wlsDomainName'),' ',parameters('wlsUserName'),' ',parameters('wlsPassword'),' ',if(equals(copyIndex(),0),'admin',concat(parameters('managedServerPrefix'), copyIndex())),' ',parameters('adminVMName'),' ',reference(parameters('GatewayPublicIPAddressName')).dnsSettings.fqdn)]"
				}
			}
		}
	],
	"outputs": {
		"wlsDomainLocation": {
			"type": "string",
			"value": "[concat('/u01/domains/', parameters('wlsDomainName'))]"
		},
		"adminHostName": {
			"type": "string",
			"value": "[reference(variables('outputAdminHostName')).dnsSettings.fqdn]"
		},
		"adminConsole": {
			"type": "string",
			"value": "[concat('http://',reference(concat(parameters('adminVMName'),variables('publicIPAddressName'))).dnsSettings.fqdn,':7001/console')]"
		},
		"adminSecuredConsole": {
			"type": "string",
			"value": "[concat('https://',reference(concat(parameters('adminVMName'),variables('publicIPAddressName'))).dnsSettings.fqdn,':7002/console')]"
		},
		"appGatewayURL": {
			"type": "string",
			"value": "[concat('http://',reference(parameters('GatewayPublicIPAddressName')).dnsSettings.fqdn)]"
		}
	}
}
