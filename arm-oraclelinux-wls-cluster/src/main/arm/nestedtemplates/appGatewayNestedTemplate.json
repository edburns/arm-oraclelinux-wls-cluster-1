{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			}
		},
		"_artifactsLocationSasToken": {
			"type": "securestring",
			"metadata": {
				"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
			}
		},
		"guidValue": {
			"type": "string",
			"defaultValue": "[newGuid()]"
		},
		"adminUsername": {
			"type": "string",
			"metadata": {
				"description": "User name for the Virtual Machine."
			}
		},
		"authenticationType": {
			"type": "string",
			"defaultValue": "password",
			"allowedValues": [
				"sshPublicKey",
				"password"
			],
			"metadata": {
				"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
			}
		},
		"adminPasswordOrKey": {
			"type": "securestring",
			"metadata": {
				"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
			}
		},
		"acceptOTNLicenseAgreement": {
			"type": "string",
			"metadata": {
				"description": "Do you agree to provide OTN credentials to accept OTN License Agreement? Enter Y or y to agree, else N or n"
			}
		},
		"otnAccountUsername": {
			"type": "string",
			"metadata": {
				"description": "Username for your Oracle Technology Network account"
			}
		},
		"otnAccountPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Password for your Oracle Technology Network account"
			}
		},
		"portsToExpose": {
			"type": "string",
			"defaultValue": "80,443,7001-9000",
			"metadata": {
				"description": "Ports and port ranges to expose"
			}
		},
		"wlsDomainName": {
			"type": "string",
			"metadata": {
				"description": "Provide Weblogic domain name"
			}
		},
		"wlsUserName": {
			"type": "string",
			"metadata": {
				"description": "Username for your Weblogic domain name"
			}
		},
		"wlsPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Password for your Weblogic domain name"
			}
		},
		"managedServerPrefix": {
			"type": "string",
			"defaultValue": "managedServer",
			"metadata": {
				"description": "Provide managed server prefix names"
			}
		},
		"dnsLabelPrefix": {
			"type": "string",
			"metadata": {
				"description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
			}
		},
		"dnsNameforApplicationGateway": {
			"type": "string",
			"defaultValue": "wlsclusterappgw",
			"metadata": {
				"description": "DNS for ApplicationGateway"
			}
		},
		"gatewayPublicIPAddressName": {
			"type": "string",
			"defaultValue": "gatewayPublicIP",
			"metadata": {
				"description": "Public IP Name for the Application Gateway"
			}
		},
		"linuxOSVersion": {
			"type": "string",
			"defaultValue": "7.4",
			"allowedValues": [
				"7.4",
				"7.3"
			],
			"metadata": {
				"description": "The Oracle Linux version for the VM. This will pick a fully patched image of this given Oracle Linux version."
			}
		},
		"numberOfInstances": {
			"type": "int",
			"defaultValue": 2,
			"minValue": 2,
			"maxValue": 5,
			"metadata": {
				"description": "Number of VMs to deploy, limit 5 since this sample is using a single storage account"
			}
		},
		"adminVMName": {
			"type": "string",
			"defaultValue": "adminVM",
			"metadata": {
				"description": "Admin Server hosting VM name."
			}
		},
		"location": {
			"type": "string",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"vmSizeSelect": {
			"type": "string",
			"defaultValue": "Standard_A3",
			"allowedValues": [
				"Standard_A1",
				"Standard_A2",
				"Standard_A3",
				"Standard_A4"
			],
			"metadata": {
				"description": "Select appropriate VM Size as per requirement (Standard_A1, Standard_A2, Standard_A3, Standard_A4)"
			}
		},
		"appGatewaySSLCertificateData": {
			"type": "string"
		},
		"appGatewaySSLCertificatePassword": {
			"type": "string"
		}
	},
	"variables": {
		"const_addressPrefix": "10.0.0.0/16",
		"const_appGatewayFrontEndHTTPPort": 80,
		"const_appGatewayFrontEndHTTPSPort": 443,
		"const_appGatewaySubnetPrefix": "10.0.1.0/24",
		"const_backendPort": 8001,
		"const_imageOffer": "Oracle-Linux",
		"const_imagePublisher": "Oracle",
		"const_linuxConfiguration": {
			"disablePasswordAuthentication": true,
			"ssh": {
				"publicKeys": [
					{
						"path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
						"keyData": "[parameters('adminPasswordOrKey')]"
					}
				]
			}
		},
		"const_managedVMPrefix": "[concat(parameters('managedServerPrefix'),'VM')]",
		"const_publicIPAddressType": "Dynamic",
                "const_requiredPortrange": ",65200-65535,5556",
		"const_storageAccountType": "Standard_LRS",
		"const_subnetPrefix": "10.0.0.0/24",
		"const_vmSize": "[parameters('vmSizeSelect')]",
		"name_appGateway": "myAppGateway",
		"name_appGatewayCertificate": "appGwSslCertificate",
		"name_appGatewaySubnet": "appGatewaySubnet",
		"name_availabilitySet": "WLSCluster-AvailabilitySet",
		"name_backendAddressPool": "myGatewayBackendPool",
		"name_frontEndIPConfig": "appGwPublicFrontendIp",
		"name_httpListener": "HTTPListener",
		"name_httpPort": "http_port",
		"name_httpSetting": "myHTTPSetting",
		"name_httpsListener": "HTTPSListener",
		"name_httpsPort": "https_port",
		"name_networkSecurityGroup": "[concat(parameters('dnsLabelPrefix'), '-nsg')]",
		"name_nic": "_NIC",
		"name_oradownScript": "oradown.sh",
		"name_outputAdminHost": "[concat(parameters('adminVMName'),variables('name_publicIPAddress'))]",
		"name_probe": "HTTPhealthProbe",
		"name_publicIPAddress": "_PublicIP",
		"name_scriptFile": "setupClusterDomain.sh",
		"name_storageAccount": "[concat(take(replace(parameters('guidValue'),'-',''),6),'olvm')]",
		"name_subnet": "Subnet",
		"name_virtualNetwork": "[concat(parameters('wlsDomainName'),'_VNET')]",
		"ref_appGatewayPublicIP": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('gatewayPublicIPAddressName'))]",
		"ref_appGatewaySubnet": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('name_virtualNetwork'), variables('name_appGatewaySubnet'))]",
		"ref_backendAddressPool": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('name_appGateway'),variables('name_backendAddressPool'))]",
		"ref_backendHttpSettings": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('name_appGateway'),variables('name_httpSetting'))]",
		"ref_backendProbe": "[resourceId('Microsoft.Network/applicationGateways/probes', variables('name_appGateway'),variables('name_probe'))]",
		"ref_frontendHTTPPort": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('name_appGateway'),variables('name_httpPort'))]",
		"ref_frontendHTTPSPort": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('name_appGateway'),variables('name_httpsPort'))]",
		"ref_frontendIPConfiguration": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('name_appGateway'),variables('name_frontEndIPConfig'))]",
		"ref_httpListener": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('name_appGateway'),variables('name_httpListener'))]",
		"ref_httpsListener": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('name_appGateway'),variables('name_httpsListener'))]",
		"ref_networkSecurityGroup": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('name_networkSecurityGroup'))]",
		"ref_sslCertificate": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates', variables('name_appGateway'),variables('name_appGatewayCertificate'))]",
		"ref_subnet": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('name_virtualNetwork'), variables('name_subnet'))]"
	},
	"resources": [
		{
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2019-06-01",
			"name": "[variables('name_networkSecurityGroup')]",
			"location": "[parameters('location')]",
			"properties": {
				"securityRules": [
					{
						"name": "WebLogicPorts",
						"properties": {
							"protocol": "TCP",
							"sourcePortRange": "*",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 320,
							"direction": "Inbound",
							"destinationPortRanges": "[split(concat(parameters('portsToExpose'),variables('const_requiredPortrange')), ',')]"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2019-06-01",
			"name": "[variables('name_storageAccount')]",
			"location": "[parameters('location')]",
			"sku": {
				"name": "[variables('const_storageAccountType')]"
			},
			"kind": "Storage",
			"properties": {
			}
		},
		{
			"apiVersion": "2018-04-01",
			"type": "Microsoft.Compute/availabilitySets",
			"location": "[parameters('location')]",
			"name": "[variables('name_availabilitySet')]",
			"properties": {
				"platformFaultDomainCount": 2,
				"platformUpdateDomainCount": 2
			},
			"sku": {
				"name": "Aligned"
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2018-11-01",
			"name": "[parameters('gatewayPublicIPAddressName')]",
			"sku": {
				"name": "Standard"
			},
			"location": "[parameters('location')]",
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[concat(parameters('dnsNameforApplicationGateway'),'-',toLower(resourceGroup().name),'-',toLower(parameters('wlsDomainName')))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2018-11-01",
			"name": "[if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('name_publicIPAddress')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_publicIPAddress')))]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "publicIPLoop",
				"count": "[parameters('numberOfInstances')]"
			},
			"properties": {
				"publicIPAllocationMethod": "[variables('const_publicIPAddressType')]",
				"dnsSettings": {
					"domainNameLabel": "[concat(toLower(parameters('dnsLabelPrefix')),copyindex(),'-',take(replace(parameters('guidValue'),'-',''),10),'-',toLower(parameters('wlsDomainName')))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"apiVersion": "2018-11-01",
			"name": "[variables('name_virtualNetwork')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('ref_networkSecurityGroup')]"
			],
			"properties": {
				"addressSpace": {
					"const_addressPrefixes": [
						"[variables('const_addressPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[variables('name_subnet')]",
						"properties": {
							"const_addressPrefix": "[variables('const_subnetPrefix')]",
							"networkSecurityGroup": {
								"id": "[variables('ref_networkSecurityGroup')]"
							}
						}
					},
					{
						"name": "[variables('name_appGatewaySubnet')]",
						"properties": {
							"const_addressPrefix": "[variables('const_appGatewaySubnetPrefix')]",
							"networkSecurityGroup": {
								"id": "[variables('ref_networkSecurityGroup')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2018-11-01",
			"name": "[if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('name_nic')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_nic')))]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "nicLoop",
				"count": "[parameters('numberOfInstances')]"
			},
			"dependsOn": [
				"[variables('name_virtualNetwork')]",
				"publicIPLoop",
				"[parameters('gatewayPublicIPAddressName')]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('name_publicIPAddress')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_publicIPAddress'))))]"
							},
							"subnet": {
								"id": "[variables('ref_subnet')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/applicationGateways",
			"dependsOn": [
				"[variables('name_virtualNetwork')]",
				"[concat('Microsoft.Compute/virtualMachines/',parameters('adminVMName'))]",
				"virtualMachineLoop"
			],
			"apiVersion": "2019-06-01",
			"name": "[variables('name_appGateway')]",
			"location": "[parameters('location')]",
			"properties": {
				"sku": {
					"name": "WAF_v2",
					"tier": "WAF_v2"
				},
				"gatewayIPConfigurations": [
					{
						"name": "appGatewayIpConfig",
						"properties": {
							"subnet": {
								"id": "[variables('ref_appGatewaySubnet')]"
							}
						},
						"type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
					}
				],
				"frontendIPConfigurations": [
					{
						"name": "appGwPublicFrontendIp",
						"type": "Microsoft.Network/applicationGateways/frontendIPConfigurations",
						"properties": {
							"publicIPAddress": {
								"id": "[variables('ref_appGatewayPublicIP')]"
							}
						}
					}
				],
				"frontendPorts": [
					{
						"name": "http_port",
						"properties": {
							"port": "[int(variables('const_appGatewayFrontEndHTTPPort'))]"
						},
						"type": "Microsoft.Network/applicationGateways/frontendPorts"
					},
					{
						"name": "https_port",
						"properties": {
							"port": "[int(variables('const_appGatewayFrontEndHTTPSPort'))]"
						},
						"type": "Microsoft.Network/applicationGateways/frontendPorts"
					}
				],
				"sslCertificates": [
					{
						"name": "appGwSslCertificate",
						"properties": {
							"data": "[parameters('appGatewaySSLCertificateData')]",
							"password": "[parameters('appGatewaySSLCertificatePassword')]"
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "myGatewayBackendPool",
						"properties": {
							"copy": [
								{
									"name": "BackendAddresses",
									"count": "[sub(int(parameters('numberOfInstances')),1)]",
									"input": {
										"fqdn": "[concat(variables('const_managedVMPrefix'), copyIndex('BackendAddresses',1))]"
									}
								}
							]
						},
						"type": "Microsoft.Network/applicationGateways/backendAddressPools"
					}
				],
				"backendHttpSettingsCollection": [
					{
						"name": "myHTTPSetting",
						"properties": {
							"provisioningState": "Succeeded",
							"port": "[int(variables('const_backendPort'))]",
							"protocol": "Http",
							"cookieBasedAffinity": "Enabled",
							"pickHostNameFromBackendAddress": true,
							"affinityCookieName": "ApplicationGatewayAffinity",
							"requestTimeout": 20,
							"probe": {
								"id": "[variables('ref_backendProbe')]"
							}
						},
						"type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
					}
				],
				"httpListeners": [
					{
						"name": "HTTPListener",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[variables('ref_frontendIPConfiguration')]"
							},
							"frontendPort": {
								"id": "[variables('ref_frontendHTTPPort')]"
							},
							"protocol": "Http",
							"requireServerNameIndication": false
						},
						"type": "Microsoft.Network/applicationGateways/httpListeners"
					},
					{
						"name": "HTTPSListener",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[variables('ref_frontendIPConfiguration')]"
							},
							"frontendPort": {
								"id": "[variables('ref_frontendHTTPSPort')]"
							},
							"protocol": "Https",
							"requireServerNameIndication": false,
							"SslCertificate": {
								"id": "[variables('ref_sslCertificate')]"
							}
						},
						"type": "Microsoft.Network/applicationGateways/httpListeners"
					}

				],
				"requestRoutingRules": [
					{
						"name": "HTTPRoutingRule",
						"properties": {
							"ruleType": "Basic",
							"httpListener": {
								"id": "[variables('ref_httpListener')]"
							},
							"backendAddressPool": {
								"id": "[variables('ref_backendAddressPool')]"
							},
							"backendHttpSettings": {
								"id": "[variables('ref_backendHttpSettings')]"
							}
						},
						"type": "Microsoft.Network/applicationGateways/requestRoutingRules"
					},
					{
						"name": "HTTPSRoutingRule",
						"properties": {
							"ruleType": "Basic",
							"httpListener": {
								"id": "[variables('ref_httpsListener')]"
							},
							"backendAddressPool": {
								"id": "[variables('ref_backendAddressPool')]"
							},
							"backendHttpSettings": {
								"id": "[variables('ref_backendHttpSettings')]"
							}
						},
						"type": "Microsoft.Network/applicationGateways/requestRoutingRules"
					}
				],
				"probes": [
					{
						"name": "HTTPhealthProbe",
						"properties": {
							"protocol": "Http",
							"path": "/weblogic/ready",
							"interval": 30,
							"timeout": 30,
							"unhealthyThreshold": 3,
							"pickHostNameFromBackendHttpSettings": true,
							"minServers": 0,
							"match": {
								"statusCodes": [
									"200-399"
								]
							}
						},
						"type": "Microsoft.Network/applicationGateways/probes"
					}
				],
				"enableHttp2": false,
				"autoscaleConfiguration": {
					"minCapacity": 2,
					"maxCapacity": 3
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2018-10-01",
			"name": "[if(equals(copyIndex(),0),parameters('adminVMName'),concat(variables('const_managedVMPrefix'), copyIndex()))]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "virtualMachineLoop",
				"count": "[parameters('numberOfInstances')]"
			},
			"dependsOn": [
				"nicLoop",
				"[concat('Microsoft.Compute/availabilitySets/', variables('name_availabilitySet'))]"
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets',variables('name_availabilitySet'))]"
				},
				"hardwareProfile": {
					"const_vmSize": "[variables('const_vmSize')]"
				},
				"osProfile": {
					"computerName": "[if(equals(copyIndex(),0),parameters('adminVMName'),concat(variables('const_managedVMPrefix'), copyIndex()))]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPasswordOrKey')]",
					"const_linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('const_linuxConfiguration'))]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "[variables('const_imagePublisher')]",
						"offer": "[variables('const_imageOffer')]",
						"sku": "[parameters('linuxOSVersion')]",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage"
					},
					"dataDisks": [
						{
							"diskSizeGB": 900,
							"lun": 0,
							"createOption": "Empty"
						}
					]
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces',if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('name_nic')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_nic'))))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('name_storageAccount')), '2019-06-01').primaryEndpoints.blob]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[if(equals(copyIndex(),0),concat(parameters('adminVMName'),'/newuserscript'),concat(variables('const_managedVMPrefix'), copyIndex(),'/newuserscript'))]",
			"apiVersion": "2019-07-01",
			"location": "[parameters('location')]",
			"copy": {
				"name": "virtualMachineExtensionLoop",
				"count": "[parameters('numberOfInstances')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/',parameters('adminVMName'))]",
				"virtualMachineLoop"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[uri(parameters('_artifactsLocation'), concat('../scripts/', variables('name_scriptFile'), parameters('_artifactsLocationSasToken')))]",
						"[uri(parameters('_artifactsLocation'), concat('../scripts/', variables('name_oradownScript'), parameters('_artifactsLocationSasToken')))]"
					],
					"commandToExecute": "[concat('sh',' ',variables('name_scriptFile'),' ',parameters('acceptOTNLicenseAgreement'),' ',parameters('otnAccountUsername'),' ',parameters('otnAccountPassword'),' ',parameters('wlsDomainName'),' ',parameters('wlsUserName'),' ',parameters('wlsPassword'),' ',if(equals(copyIndex(),0),'admin',concat(parameters('managedServerPrefix'), copyIndex())),' ',parameters('adminVMName'),' ',reference(parameters('gatewayPublicIPAddressName')).dnsSettings.fqdn)]"
				}
			}
		}
	],
	"outputs": {
		"wlsDomainLocation": {
			"type": "string",
			"value": "[concat('/u01/domains/', parameters('wlsDomainName'))]"
		},
		"name_adminHost": {
			"type": "string",
			"value": "[reference(variables('name_outputAdminHost')).dnsSettings.fqdn]"
		},
		"adminConsole": {
			"type": "string",
			"value": "[concat('http://',reference(concat(parameters('adminVMName'),variables('name_publicIPAddress'))).dnsSettings.fqdn,':7001/console')]"
		},
		"adminSecuredConsole": {
			"type": "string",
			"value": "[concat('https://',reference(concat(parameters('adminVMName'),variables('name_publicIPAddress'))).dnsSettings.fqdn,':7002/console')]"
		},
		"appGatewayURL": {
			"type": "string",
			"value": "[concat('http://',reference(parameters('gatewayPublicIPAddressName')).dnsSettings.fqdn)]"
		}
	}
}
